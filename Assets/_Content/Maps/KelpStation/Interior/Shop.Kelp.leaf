# basePath interior.shop.kelp

#include "Headers/Common.leaf"

#const MerchantId = kelpMechanic
#const UnlockHintNodeId = .unlockHintSomewhere
#const UnlockHintHereNodeId = .unlockHintHere
#const LowExpNodeId = .lowExp
#const FreeItemPromptId = .freeItem
#const CostItemPromptId = .costItem
#const CancelNodeId = .cancel
#const NotEnoughCashNodeId = .notEnoughCash
#const PurchaseNodeId = .purchased

#include "Headers/CommonShop.leaf"

// Intros

#ShopLockedHandler(intro, !JobStartedOrComplete(kelp-welcome), !global:Act1.TalkedToMomMad)
@boostScore 100
$goto act1.momMadEnd

#ShopLockedHandler(b, JobStartedOrComplete(kelp-welcome))
@boostScore 90
{@$MerchantId} I'm still getting my shop set up for the day.
               Why don't you check back soon? I'll talk you through all the ship upgrades. 
               And good luck out there, mijita.
{@player}     Thanks, Tío.

#ShopHandler(first, JobStartedOrComplete(kelp-shop-welcome))
@boostScore 80
@once
{@$MerchantId}  ¡Hola, mijita!
                What do you think of {nameof @guide}? Pretty sweet A.I., right?
                His love of data was Mer's idea. 
{@player}       Wait... you and Mer created {nameof @guide}?
{@$MerchantId}  ¡Claro que sí! Didn't I tell you?
$set jobs:kelp-mechanic.initiated-first-convo = true
$call GiveJournalEntry("N24_TioVictor")

:: ContinueAfterTioVictorJournal
@trigger    JournalHidden
@when       JobStartedOrComplete(kelp-shop-welcome), jobs:kelp-mechanic.initiated-first-convo
@once
@cutscene
{@$MerchantId}  Now that you and {nameof @guide} will be traveling outside the Kelp Forest, you'll need some upgrades. 
                You still only have {h}Level 1 clearance{/h}, so you'll need to stick to the basics for now. 
                Want to take a look? 
$choice .action.openShop; Sure! 
$choice .action.cancel; No thanks. I'll come back later.  

#ShopHandler(a)
{@$MerchantId} Welcome back, mijita. Need any upgrades for your ship? 
$choice .action.openShop; Sure, I'll take a look. Thanks, Tío!
$choice .action.cancel; Nah. I'm good for now. 

#ShopHandler(thoughtfulMer, HasJournalEntry("N05_MersArticle"))
@boostScore 50
@once
    // STORY BEAT E
    {@$MerchantId} You look thoughtful, mijita. Is something bothering you?
    {@player}   Well... maybe a little bit.
                Mom's always saying that Mer's dream was to stay here and create a Kelp Refuge.
                But I read an article about Mer. She didn't talk about the Refuge at all.
    {@$MerchantId} Well... your sister did love this place, Ollie.
                   But the older she got, the more she fell in love with Lower Depths.
                   If she had survived, I think she would've devoted her life to learning more about that place.
    {@player}      So... what happened?
    {@$MerchantId} ¿Qué?
    {@player}     I still don't know exactly how she died.
                  Mom said it was an equipment malfunction, but if Mer was such a tech genius... 
    {@$MerchantId} Lo siento, Ollie. It's not my place to say.
                   For now, let's focus on work, okay?            

#ShopHandler(glitchyMessages, HasJournalEntry("S04"), jobs:final-final.tioUpgradeCallComplete)
@once
@boostScore 50
    // STORY BEAT G
    {@player}  Tío, I'm so worried about Sam. I'm still getting those weird, glitchy messages. 
               Any luck finding that upgrade for {nameof @guide}?
    {@$MerchantId} I'm sorry, mijita. Nothing yet.
                   Mer was working on so many projects. 
                   If there is an upgrade, it might take a while to track down.
    {@player}      Please keep looking. 
    {@$MerchantId} Of course, Ollie. I'll ring you on the comms as soon as I find something, okay?
    {@$MerchantId} Gracias, Tío.

#ShopHandler(askForUpgrade, jobs:final-final.upgradeReady, !jobs:final-final.tio.code-received)
@boostScore 1000
    // final job unlocked after seeing 8th specter
    {@$MerchantId} So, mijita. Ready to upgrade {nameof @guide} and rescue {nameof @sam}? 
    $choice .discussUpgrade; Yes! Tell me about the upgrade. 
    $choice .action.openShop; I'm not ready yet. I'd like to look around the shop. 
    $choice .action.cancel; Actually, I'll come back later. 

#ShopHandler(restorePower, JobInProgress(final-final), JobTaskTop(getUncleHelp), !jobs:final-uncleHelped)
@once
@boostScore 50
// $call MerCutsceneBGM->Activate()
{@player}       Tío... I need your help.
                Mom stole my card.| The AquaLab is dead in the water.
                How could she do this??{wait 0.5} She doesn't even care| if Sam lives or dies!
{@$MerchantId}  This| isn't about Sam, mijita.
                It's about Meredith.
{@player}       I don't understand.| What does |Mer| have to do with this?
// $call BGM->SetVolume(0, 1)
$call BGM->SetVolume(0, 8)
{@$MerchantId}  Your sister's death...{wait 1} it| wasn't an equipment malfunction.
$branch  .restorePowerCamera1
// $call MerCutsceneBGM->PlayBGM()
{@$MerchantId}  She was on her way back from placing the Challenger Deep...
                And she came upon a whale| caught in a fishing net. 
                Mer couldn't let it die. She swam out to cut it free. 
{@player}       That sounds like Mer. She| loved| whales so much.
{@$MerchantId}  Yes.| But...{wait 1} Ollie, the whale didn't know any better.{wait 0.5} It panicked.{wait 0.5} Called out for help. 
                We're not sure exactly what happened.
                But{wait 0.5} your sister never made it back from the Lower Depths.
$branch  .restorePowerCamera2
{@player}       {slow}Oh{wait 0.5} no.{wait 1} Poor Mer.{/slow}
                That's why{wait 0.5} Mom| doesn't want me going down there. 
{@$MerchantId}   Your mother doesn't want to lose you.
                But...{wait 1} you're an adult now, Ollie.
$branch  .restorePowerCamera3
                And your best friend needs you.
                {hide-dialog} {wait 1} {fade-out black, 1, wait} {wait 2}
$call CameraSnapToPose("ShopSubCam")
                {wait 0.1} {fade-in 1, wait} {wait 1}
                $set jobs:final-power-disabled = false
{@$MerchantId}  I've transferred {nameof @guide}'s upgrade to Mer's old data card.
                Take it up to your ship.
                This should get you where you need to go. 
{@player}       Thank you,| Tío.{wait 1} Wish me luck.
$set jobs:final-uncleHelped = true
$set jobs:final-power-disabled = false
$call UnlockRoom("Experimentation")
$call UnlockRoom("Modeling")
$call UnlockRoom("ModelingFoyer")
$call CheckJobTasks()

#ShopHandler(postFinalJob, JobCompleted(final-final))
@once
@boostScore 50
{@$MerchantId} Ollie. Welcome back!
{@$MerchantId} Everyone's talking about how you rescued the Nautilus. 
{@$MerchantId} I knew you could do it, mijita.
{@player} Thanks, Tío.
{@player} Mom wasn't too upset, was she?
{@$MerchantId} Well...  she stress-baked three trays of cinnamon kelp rolls when she found out.
{@$MerchantId} But I could tell she was proud of you.
{@$MerchantId} Just... maybe don't sneak out for a few days, okay?
{@player} Yeah. Probably a good idea. 

#ShopHandler(gotFlashlightAssignedHere, world:shop.boughtFlashlightFrom == "kelp", HasUpgrade("Flashlight"))
@once
{@$MerchantId}  Welcome back Ollie! Hey, you got back my {nameof Flashlight}!
                Well, as I promised, it's yours now. You can make better use of it now than I can.
                Now, need any other upgrades for your ship?
$choice .action.openShop; Sure do!
$choice .action.cancel; Not right now.


#ShopHandler(lookingForFlashlight, world:flashlightQuest, !HasUpgrade("Flashlight"))
{@$MerchantId}  Welcome back Ollie! I guess you heard that {nameof @coralMechanic} dropped my {nameof Flashlight} after I lent it to her.
                Need any help finding it?
$choice .flashlightRefresher; I could use a refresher about flashlight.
$choice .action.openShop; No thanks. Show me the shop!
$choice .action.cancel; Never mind.

:: flashlightRefresher
{@$MerchantId}  It shouldn't be too bad.
                Since {nameof @coralMechanic} dropped the {nameof Flashlight} over the {nameof FinalStation}, you'll just have to go down to retrieve it.
                Now, need any other upgrades for your ship?
$choice .action.openShop; Show me the shop!
$choice .action.cancel; Not right now.



#ShopHandler(gotFlashlight, world:shop.boughtFlashlightFrom != "kelp", HasUpgrade("Flashlight"))
@once
{@$MerchantId}  Welcome back Ollie! Whoa... is that my {nameof Flashlight}?
$if world:shop.boughtFlashlightFrom == "coral"
    {@player}   Yep! {nameof @coralMechanic} told me where to find it!
    {@kelpMechanic} Of course! She was the last one to have it before you!
$elseif world:shop.boughtFlashlightFrom == "bayou"
    {@player}   Yep! {nameof @bayouMechanic} told me where to find it!
$else
    {@player}   Yep! {nameof @arcticMechanic} told me where to find it!
$endif

{@$MerchantId}  Well, it's {slow}your{/slow} {nameof Flashlight} now.
                While you're here, need any other upgrades?
$choice .action.openShop; Sure do!
$choice .action.cancel; Not right now.

:: action.cancel
@cutscene
{@$MerchantId}  {random Okay, Ollie. Good luck out there!| Well, you know where to find me!}

// Generic

:: unlockHintHere
{@$MerchantId}   {random Oh hey,|You'll be happy to know that|And I can tell you that} this would unlock a {h}Job{/h} right here.

:: unlockHintSomewhere
{@$MerchantId}   This would unlock some jobs over at the {nameof $local:hintStation}!

:: lowExp
{@$MerchantId}   Oh, {random hang on|sorry, mijita}... I can't let you have this just yet. You'll need {h}Clearance Level {$local:requiredLevel}{/h} first.

:: freeItem
{@$MerchantId}   So, want the {nameof $local:itemId}? Won't cost you anything.

:: costItem
{@$MerchantId}   So, want to buy the {nameof $local:itemId}? \
                That'll be {cash}{$local:cashCost}{/cash}.

:: cancel
{@$MerchantId}   Suit yourself!

:: notEnoughCash
{@$MerchantId}   Not enough cash. Sorry, mijita. 

:: purchased
{@$MerchantId}   {random Good choice!|Good call.|Alright, it's yours!}

:: genericWelcome
{@$MerchantId}  Okay, but don't wait too long on this. Sam needs you.
                What can I get you?

:: discussUpgrade
@cutscene
{@$MerchantId}  The {h}Ammonite Upgrade{/h} should unscramble all of Sam's messages!
                I'm uploading it to your data card now. 
                I've also linked the upgrade to our job board here...
                Which means any jobs that Sam tries to send out should be able to reach us.
{@player}       Thank you so much, Tío.
{@$MerchantId}  Don't thank me yet, mijita. First you'd better see if it worked.
                Take a look at the anomalies in AQOS, and head to the {map-name}Helm{/map-name} on your ship to use your data card.
$set    player:specterDecrypt = true
$set jobs:final-final.tio.code-received = true
//prevent player from traveling to non-deep sea stations
$call LockStation(ArcticStation)
$call LockStation(BayouStation)
$call LockStation(CoralStation)

:: restorePowerCamera1
{hide-dialog} {wait 1}
$call CameraSnapToPose("MerDeathCamA")
{wait 0.5}

:: restorePowerCamera2
{hide-dialog} {wait 1}
$call CameraSnapToPose("MerDeathCamB")
{wait 1}

:: restorePowerCamera3
$call CameraSnapToPose("MerDeathCamC")

// Idle

#OpenHandler(a)
{@$MerchantId}  Anything you want to learn more about? 

#OpenHandler(b)
{@$MerchantId}  Does anything catch your eye?

#CloseHandler(a)
{@$MerchantId}  Thank you!

#CloseHandler(purchased, shop:purchaseCount)
@boostScore 10
{@$MerchantId}  Come back anytime, mijita! 

#CloseHandler(notEnoughCash, shop:notEnoughCount)
{@$MerchantId}  Come back with some more {pluralnameof Cash} next time.

#CloseHandler(notEnoughExp, shop:needsExpCount)
{@$MerchantId}  Come back when you've got a higher {h}Clearance Level{/h}!

#OpenExplorationHandler(a)
{@$MerchantId}  Interested in any sub upgrades? 

#OpenExplorationHandler(b)
{@$MerchantId}  Any upgrades you want for your sub?

#OpenScienceHandler(a)
{@$MerchantId}  Do you need any new tools for your lab? 

#OpenScienceHandler(b)
{@$MerchantId}  Need any new experimentation tools? 

// Exploration

#ItemHandler(ROVTagger)
{@$MerchantId}  {nameof ROVTagger}!| Simple, but really useful. 
                You can switch on {nameof ROVTagger} when you're out in your sub.
                When you move close to a species you've already scanned, {nameof ROVTagger} will {h}count{/h} them.
                Count enough organisms, and it'll give you a population estimate! 
                MUCH faster than counting each critter by hand. 
{@player}    Wow. I could definitely use this! 
$set    jobs:common-dive.seen.tagger-intro = true
$EvaluateItemPurchase()

#OverrideItemHandler(FlashlightCoordinates, flashlight.first)
@boostScore 100
@once
{@$MerchantId}  The {nameof Flashlight}!
                You'll definitely need one of these, Ollie. The ocean can be dangerous if you can't see what's coming.
                I mean... I guess the ocean can be dangerous either way. But don't tell your mother I said that.
                We should get this on your sub as soon as we can.
$set local:postPurchaseBranch = "interior.shop.kelp.PostFlashlight"
$EvaluateItemPurchase()

#ItemHandler(FlashlightCoordinates)
{@$MerchantId}  That's the {nameof Flashlight}!
                I'd like to get that on your sub as soon as possible.
$set local:postPurchaseBranch = "interior.shop.kelp.PostFlashlight"
$EvaluateItemPurchase()

:: PostFlashlight
$set    world:flashlightQuest = true
$set    world:shop.boughtFlashlightFrom = "kelp"
{@kelpMechanic} ...wait.{wait 0.5} I| lent that out to {nameof @coralMechanic}.
                And then she| dropped it| somewhere at {nameof FinalStation}.
                ...{wait 0.5}{auto}
                Okay. New plan, mijita. Go retrieve it, and you can keep it.
{@player}       {nameof FinalStation}... isn't that near where Sam's mission started out?
{@kelpMechanic} Yes, I think so.
                But don't worry, Mijita. You won't need to go <i>too</i> deep.
                Just keep an eye out for monsters down there. 

$call UnlockSite(RS-0)
$call UnlockStation(FinalStation)
$call ShowPopup(map.unlock.finalStation.header, map.unlock.finalStation.desc)

#ItemHandler(ProbeHacker)
{@$MerchantId}  The {nameof ProbeHacker}! Your sister helped me develop this one, too.
{@player}       Wow... for real??
{@$MerchantId}  Claro que sí. You know how she was. A total tech geek. 
                The {nameof ProbeHacker} will allow you to obtain data from any {h}probes{/h} you find.
                Even Challenger Deep... if it wasn't lost at the bottom of the ocean.
$EvaluateItemPurchase()

#ItemHandler(Microscope)
{@$MerchantId}  That's the {nameof Microscope}!
                In some of your jobs, you'll need to find organisms that are too small to see.
                Sometimes they look like clouds or mist. With the {nameof Microscope}, you should be able to ID them. 
$EvaluateItemPurchase()

// Navigation

#ItemHandler(PropGuard)
{@$MerchantId}  The {nameof PropGuard}?| Not a bad idea. 
                Your propeller can get tangled up in kelp and other thick vegetation.   
                The {nameof PropGuard} will help you get through safely.
{@player}      Ooh, sounds perfect for exploring. 
{@$MerchantId}  Just don't get complacent, mijita.
                Even with the {nameof PropGuard}, it's easy to get in over your head out there. 
$EvaluateItemPurchase()

#ItemHandler(Engine)
{@$MerchantId}  That's the {nameof Engine}!
                It'll boost your sub's engine and help you move through strong currents.
{@player}       Ooh. That sounds awesome!
{@$MerchantId}  The {nameof Engine} is also harder to control, so be careful with it...
                Your mother would kill me if you crashed another sub. 
                Uh, no offense, mijita. 
$EvaluateItemPurchase()

#ItemHandler(Hull)
{@$MerchantId}   The {nameof Hull}! Super important if you ever want to go deeper.
                 The lower depths would crush your sub like a tin can. 
{@player}       Well, that's comforting. 
{@$MerchantId}  Don't worry, Mijita. 
                With this plating, you'll be able to withstand much more pressure...
                Though its not guaranteed to hold up against sea monsters. 
$EvaluateItemPurchase()

#ItemHandler(Icebreaker)
{@$MerchantId}  Whoa, careful, Mijita! That's the {nameof Icebreaker}.
                It shatters ice by emitting a powerful, localized electrical field.
{@player}      Oh. So, um... I probably shouldn't play with that. 
{@$MerchantId}  Nope. But it's super helpful for jobs out in the Arctic. 
$EvaluateItemPurchase()

// Experimentation

#ItemHandler(StressTank)
{@$MerchantId}   This is the {nameof StressTank}!
                 Use it to measure the stress ranges of different organisms. 
                Really helpful if you want to understand the conditions that different creatures need to thrive.
{@player}       Awww. I hope it doesn't stress them out <i>too</i> much...
{@$MerchantId}  Don't worry. The tank is designed to stop making adjustments before any creatures end up harmed. 
$EvaluateItemPurchase()

#ItemHandler(MeasurementTank)
{@$MerchantId}  Oh, the {nameof MeasurementTank} is super useful!
                Use it to measure different rates for an organisms--how fast they reproduce, how quickly they eat, stuff like that.  
               You'll need this for some of the more complicated jobs out there. 
$EvaluateItemPurchase()

// Modeling

#ItemHandler(VisualModel)
{@$MerchantId}  The {nameof VisualModel}! Every scientist needs one of these. 
                Perfect for your {map-name}Modeling Lab{/map-name}!
                Use it to create visual models and understand the interactions between species.
{@player}       Ooh, this definitely sounds useful.       
$EvaluateItemPurchase()

#ItemHandler(PredictionModel)
{@$MerchantId}  The {nameof PredictionModel} is an essential tool for your {map-name}Modeling Lab{/map-name}!
                Once you've got enough data, you can use it to make predictions. 
                Super useful if you want to understand what might happen in an ecosystem.
$EvaluateItemPurchase()

#ItemHandler(InterveneModel)
{@$MerchantId}  The {nameof InterveneModel} is an amazing tool... 
                Especially for people like you, who are always trying to help.
                Someday, you might find yourself working to rescue a struggling ecosystem.
                You can use the {nameof InterveneModel} to model the outcomes of different interventions. 
$EvaluateItemPurchase()