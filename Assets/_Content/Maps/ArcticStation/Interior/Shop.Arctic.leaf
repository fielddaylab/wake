# basePath interior.shop.arctic

#include "Headers/Common.leaf"

#const MerchantId = arcticMechanic
#const UnlockHintNodeId = .unlockHintSomewhere
#const UnlockHintHereNodeId = .unlockHintHere
#const LowExpNodeId = .lowExp
#const FreeItemPromptId = .freeItem
#const CostItemPromptId = .costItem
#const CancelNodeId = .cancel
#const NotEnoughCashNodeId = .notEnoughCash
#const PurchaseNodeId = .purchased

#include "Headers/CommonShop.leaf"

// Intros

#ShopLockedHandler(a)
@boostScore -100
{@$MerchantId} Sorry, kid, shop's not open right now.
               Come on back soon! 

#ShopHandler(first)
@boostScore 100
@once
{@$MerchantId}  Oh, hi there! Welcome to my humble little shop.
                You're Meredith's sister, aren't ya? She musta been a lot older than you. 
{@player}       Yeah. Ten years. 
{@$MerchantId}  What was that?? You'll have to speak up. I'm a little hard of hearing.
{@player}       Ten years!
{@$MerchantId}  Aw, I understand, Ollie. I've shed a lot of tears, too.
                Anyhow, I'm glad you're here.
                We're like a family around these parts. 
{@player}       Really? Juno seems kind of lonely.
{@$MerchantId}  Eh?
{@player}       Juno! Seems! Lonely!
{@$MerchantId}  Sheesh, ya didn't have to shout. 
                Don't worry about Juno. She loves it here. 
                Wanna take a look around my shop, Ollie? 
$choice .action.openShop; Sure, thanks!
$choice .action.cancel; Not right now.

#ShopHandler(a)
{@$MerchantId} Welcome back, Ollie. Wanna take a look around?
$choice .action.openShop; Sure, thanks!
$choice .action.cancel; Not right now.

#ShopHandler(lookingForFlashlight, world:flashlightQuest, !HasUpgrade("Flashlight"))
{@$MerchantId} Welcome back, kid! Still looking for the {nameof Flashlight} {nameof @coralMechanic} dropped?
        I can fill you in on the details if you need a refresher.
$choice .flashlightRefresher; Remind me about the flashlight.
$choice .action.openShop; Show me the shop!
$choice .action.cancel; Never mind.

:: flashlightRefresher
{@$MerchantId}  Well, if I've got this straight... {nameof @coralMechanic} borrowed the {nameof Flashlight} from your uncle {nameof @kelpMechanic}.
                Then she dropped it near the {nameof FinalStation}.
                You'll have to dive down yourself to get it back.
                So... anything else I can do for you?
$choice .action.openShop; Show me the shop!
$choice .action.cancel; Not right now.

#ShopHandler(gotFlashlight, world:shop.boughtFlashlightFrom == "arctic", HasUpgrade("Flashlight"))
@once
{@$MerchantId} Welcome back, kid! Nice work retrieving that {nameof Flashlight}.
        Told ya you could handle it. 
        Wanna take a look around? 
$choice .action.openShop; Sure, thanks!
$choice .action.cancel; Not right now.

#ShopHandler(afterChess, CompletedJobCount(ArcticStation, 3))
@once
{@$MerchantId}  Hey, I heard you played chess with Juno! How'd it go?
{@player}       Um... let's just say I could use more practice.
                She's way above my level.
$call GiveJournalEntry("N29_Chess")

:: ContinueAfterChessJournal
@trigger    JournalHidden
@when       HasJournalEntry("N29_Chess")
@once
@cutscene
{@$MerchantId}  Eh, don't take it too hard. Not a one of us is anywhere near Juno's level.
{@$MerchantId}  Well, want to look at the shop? We haven't got any chess strategy books in stock, but...
$choice .action.openShop; Sure, thanks!
$choice .action.cancel; Not right now.

:: action.cancel
@cutscene
{@$MerchantId}  Well, good luck out there, kid. If you ever need anything, just holler.

// Generic

:: unlockHintHere
{@$MerchantId}   {random Oh hey,|You'll be happy to know that|Looks like} this would unlock a {h}Job{/h} right here.

:: unlockHintSomewhere
{@$MerchantId}   {random Whoa,|Hey,|Looks like} this would unlock some jobs over at the {nameof $local:hintStation}!

:: lowExp
{@$MerchantId}   Oh, {random not so fast, kid|sorry, Ollie}... I can't let you have this. You'll need a higher {h}Clearance Level{/h} first. 

:: freeItem
{@$MerchantId}   So, want the {nameof $local:itemId}? Won't cost you a thing.

:: costItem
{@$MerchantId}   So, want to buy the {nameof $local:itemId}? \
                {random It'll|That'll} be {cash}{$local:cashCost}{/cash}!

:: cancel
{@$MerchantId}   Suit yourself, kid. 

:: notEnoughCash
{@$MerchantId}   Sorry, kid. Not enough cash. 

:: purchased
{@$MerchantId}   {random A fine choice.|Here ya go, kid.|Okey dokey, it's all yours!}

// Idle

#OpenHandler(a)
{@$MerchantId}  Anything catch your eye?

#OpenHandler(b)
{@$MerchantId}  So what'll it be, kid? 

#CloseHandler(a)
{@$MerchantId}  Thank ya!

#CloseHandler(purchased, shop:purchaseCount)
@boostScore 10
{@$MerchantId}  Come back anytime, Ollie. 

#CloseHandler(notEnoughCash, shop:notEnoughCount)
{@$MerchantId}  Come back with more {pluralnameof Cash} next time. 

#CloseHandler(notEnoughExp, shop:needsExpCount)
{@$MerchantId}  Come back when you've got a higher {h}Clearance Level{/h}!. 

#OpenExplorationHandler(a)
{@$MerchantId}  I've got plenty of exploration tools. Anything you need?

#OpenExplorationHandler(b)
{@$MerchantId} Plenty of sub upgrades here. What do you think, kid?

#OpenScienceHandler(a)
{@$MerchantId}  Looking to upgrade your lab? 

#OpenScienceHandler(b)
{@$MerchantId}  Need anything for your scientific pursuits?

// Exploration

#ItemHandler(ROVTagger)
{@$MerchantId}  The {nameof ROVTagger}.| A worthy sub upgrade. 
                If you switch it on and move close to a species you've already scanned, the {nameof ROVTagger} will {h}count{/h} it.
                Count enough organisms, and it'll do the rest and give you a population estimate.
{@player} Ooh, sounds awesome! I could definitely use that.  
$set    jobs:common-dive.seen.tagger-intro = true
$EvaluateItemPurchase()

#OverrideItemHandler(FlashlightCoordinates, flashlight.first)
@boostScore 100
@once
{@$MerchantId}  The {nameof Flashlight}.
                You oughta get one of these as soon as possible
                Real helpful for deep-sea jobs where the light can't reach.
$set local:postPurchaseBranch = "interior.shop.arctic.PostFlashlight"
$EvaluateItemPurchase()

#ItemHandler(FlashlightCoordinates)
{@$MerchantId}  That's the {nameof Flashlight}!
                I'd suggest gettin' one of those as soon as possible. 
$set local:postPurchaseBranch = "interior.shop.arctic.PostFlashlight"
$EvaluateItemPurchase()

:: PostFlashlight
$set    world:flashlightQuest = true
$set    world:shop.boughtFlashlightFrom = "arctic"
{@arcticMechanic}  Alright, kid, I'll just grab that for ya...
                    Huh? 
                    Oh, that's right. |{nameof @coralMechanic} borrowed the {nameof Flashlight} from your uncle, and then dropped it by the {nameof FinalStation}.
                    Well,| nothin' to do but go fish it up! 
{@player}           Wait. You want <i>me</i> to go get it??  
{@arcticMechanic}   What's the matter, Ollie? Your sister used to explore the Lower Depths all the time.  
{@player}           But... that's different. My sister was a genius.
{@arcticMechanic}   Well, I don't know much about that.  
                    But if you want that flashlight, you're gonna have to dive down there and get it. 

$call UnlockSite(RS-0)
$call UnlockStation(FinalStation)
$call ShowPopup(map.unlock.finalStation.header, map.unlock.finalStation.desc)

#ItemHandler(ProbeHacker)
{@$MerchantId}  The {nameof ProbeHacker}! 
                Pretty sure your sister had somethin' to do with this one, Your uncle, too.
                It'll allow you to read data from any {h}probes{/h} you find.
                You'll need one of these if you ever wanna scan historical data. 
$EvaluateItemPurchase()

#ItemHandler(Microscope)
{@$MerchantId}  That's the {nameof Microscope}!
                All those tiny critters out there can look like clouds or mist. 
                With this, you can see them more closely.... and even scan 'em.
$EvaluateItemPurchase()

// Navigation

#ItemHandler(PropGuard)
{@$MerchantId}  The {nameof PropGuard}!
                This baby is super useful. 
                You don't want your propeller getting all caught up in the weeds. 
$EvaluateItemPurchase()

#ItemHandler(Engine)
{@$MerchantId}  That's the {nameof Engine}!
                Boosts your engine power to help you fight strong currents.
                Real fun to drive with, too. But it can make your sub harder to control, so don't get too crazyz.
$EvaluateItemPurchase()

#ItemHandler(Hull)
{@$MerchantId}  The {nameof Hull}! 
                You'll need this if you ever wanna head to the lower depths.
                Since you're Meredith's sister, I'm guessin' you'll be wanting this one... she couldn't stay away from the deep sea, either.
                With this plating, your sub will be strong enough to stand up to the deep sea pressure. 
$EvaluateItemPurchase()

#ItemHandler(Icebreaker)
{@$MerchantId}  Ah, one of my favorites. The {nameof Icebreaker}!
                Shatters ice by using a strong, localized electric field.
                Real fun to play with, too. Though, uh, don't tell your uncle I said that. 
$EvaluateItemPurchase()

// Experimentation

#ItemHandler(StressTank)
{@$MerchantId}   The {nameof StressTank} 
                Use it to measure the stress ranges of different creatures.
                 Real useful for figuring out the ideal conditions for plants and critters.    
$EvaluateItemPurchase()

#ItemHandler(MeasurementTank)
{@$MerchantId}  The {nameof MeasurementTank}! 
                This one's great for measuring various rates for different creatures.
                If you want to really understand what makes an ecosystem tick, this one's a must. 
$EvaluateItemPurchase()

// Modeling

#ItemHandler(VisualModel)
{@$MerchantId}  The {nameof VisualModel}!
                A handy upgrade for your {map-name}Modeling Lab{/map-name}.
                Use it to visualize how different species interact. 
$EvaluateItemPurchase()

#ItemHandler(PredictionModel)
{@$MerchantId}  The {nameof PredictionModel}!
                This would make a fine addition to your {map-name}Modeling Lab{/map-name}.
               You can use it to make predictions about critters in different ecosystems.
$EvaluateItemPurchase()

#ItemHandler(InterveneModel)
{@$MerchantId}  The {nameof InterveneModel}! 
                A handy tool for your {map-name}Modeling Lab{/map-name}.
               If you want to intervene to help an ecosystem, you can use this to model possible outcomes.
$EvaluateItemPurchase()