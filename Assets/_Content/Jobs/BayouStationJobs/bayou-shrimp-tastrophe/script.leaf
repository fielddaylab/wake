# basePath job.bayou-shrimp-tastrophe

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@bayouSci}    The Shrimpers' requests for an explanation have become more alarmed as the shrimp populations continue to drop.
                Perhaps after all your work in Site P, we can finally give them an answer.
                Please construct a {h}Descriptive Model{/h} that explains the situation.
$set jobs:bayou-shrimp-tastrophe.sync-failed = false

:: modelCompleted
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    What a model! Looks like there are a lot of overlapping spikes and dips in organism populations and environmental conditions.
            When you think you understand it, head back to {nameof @bayouSci}.


// MODEL SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:bayou-shrimp-tastrophe.sync-failed
@once
$set jobs:bayou-shrimp-tastrophe.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(createModel), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(createModel), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
    $if HasFact(P_DeadZone.Model.Shrimptastrophe.Visual)
        $if !jobs:bayou-shrimp-tastrophe.sync-failed
            {@guide}    Time to try out your model in the {h}Describe{/h} tab.
        $else
            $branch .notEnoughData
        $endif
    $else
        $branch .notEnoughData
    $endif

:: notEnoughData
{@guide}    Seems like we don't have enough information to complete our model accurately.
                        Look for {h}question marks{/h} in the Visual model interface, those point to where we may need more data.
            $if !HasFact(WhiteShrimp.Reproduce)
                $branch .suggestReproduce
            $elseif !HasFact(WhiteShrimp.Reproduce.Stressed)
                $branch .suggestReproduce
            $elseif !HasFact(WhiteShrimp.Consume.Oxygen)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(WhiteShrimp.Produce.CarbonDioxide)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(Cyanobacteria.Reproduce)
                $branch .suggestReproduce
            $elseif !HasFact(Cyanobacteria.Reproduce.Stressed)
                $branch .suggestReproduce
            $elseif !HasFact(Cyanobacteria.Produce.Oxygen)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(Cyanobacteria.Consume.CarbonDioxide)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(Cyanobacteria.Consume.Light)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(DecomposingBacteria.Reproduce)
                $branch .suggestReproduce
            $elseif !HasFact(DecomposingBacteria.Eats.Detritus)
                $branch .suggestDecompEat
            $elseif !HasFact(DecomposingBacteria.Consume.Oxygen)
                $branch .suggestMeasureEnviro
            $elseif !HasFact(DecomposingBacteria.Produce.CarbonDioxide) 
                $branch .suggestMeasureEnviro
            $elseif !HasFact(WhiteShrimp.Eats.Cyanobacteria)
                $branch .suggestShrimpEat
            $elseif !IsFactFullyUpgraded(WhiteShrimp.Eats.Cyanobacteria)
                $branch .suggestEatRates
            $else
                {@guide}    When you think you've found the missing pieces, try to simulate again with the new data.
            $endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestMeasureEnviro
{@guide}    Are you sure you've found out all the ways the different organisms affect the water conditions? The {h}Measurement Tank{/h} may still be useful.

:: suggestDecompEat
{@guide}    Maybe look into what {pluralnameof DecomposingBacteria} eat?

:: suggestShrimpEat
{@guide}    Maybe look into what {pluralnameof WhiteShrimp} eat?

:: suggestEatRates
{@guide}    Maybe look into the eating rates of these organisms?

// CATCH-ALL GUIDE TEXT

:: catchCreateModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(createModel)
@boostScore -5
@cutscene
{@guide}    We need to model why shrimp populations are decreasing.
            It's a complex system, but with everything we've pieced together over the last shrimp jobs I am sure we can figure it out!

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Time to head back to {nameof bayouSci} in the station.





// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(tastropheArgueModel)
@cutscene
{@bayouSci}    So what is it that happened in this area to create this "Deadzone"?
$choice .argue.oxygen.begin; It has to do with the oxygen levels.
$choice .argue.light.begin; It has to do with the light levels.
$choice .argue.notSure; Still not sure.
$choose branch

:: argue.notSure
{@bayouSci}    That's okay. It is certainly one of our most perplexing issues to date.
                Let me know when you're more certain.

// ---------- Oxygen Route

:: argue.oxygen.begin
$if ArgueIsComplete(tastropheArgueShrimpOxygen), ArgueIsComplete(tastropheArgueBacteriaOxygen), ArgueIsComplete(tastropheArgueCyanoDetritus), ArgueIsComplete(tastropheArgueCyanoDyingCause)
    // jump to model
    {@bayouSci}    We've established the oxygen conflict between {nameof WhiteShrimp} and {nameof DecomposingBacteria}, as well as the what and why of {nameof Cyanobacteria} dying off.
    $branch .argue.shared.loadModel
$elseif ArgueIsComplete(tastropheArgueShrimpOxygen), ArgueIsComplete(tastropheArgueBacteriaOxygen), ArgueIsComplete(tastropheArgueCyanoDetritus)
    // jump to next bit
    {@bayouSci}    We've established the oxygen conflict between {nameof WhiteShrimp} and {nameof DecomposingBacteria}, as well as that {nameof Cyanobacteria} are dying off.
    $branch .argue.oxygen.loadCyanoDyingCause
$elseif ArgueIsComplete(tastropheArgueShrimpOxygen), ArgueIsComplete(tastropheArgueBacteriaOxygen)
    // jump to detritus source
    {@bayouSci}    We've established the oxygen competition between {nameof WhiteShrimp} and {nameof DecomposingBacteria}.
    $branch .argue.oxygen.loadCyanoDetritus
$elseif ArgueIsComplete(tastropheArgueShrimpOxygen)
    // jump to bacteria half
    {@bayouSci}    We've established the shrimp bit.
    $branch .argue.oxygen.loadBacteria
$else
    // load shrimp half
    $branch .argue.oxygen.loadShrimp
$endif

:: argue.oxygen.loadShrimp
$call ArgueLoad(tastropheArgueShrimpOxygen)
$if ArgueSetClaim(ClaimShrimpOxygen, jobs.bayou-shrimp-tastrophe.argue.claimLabelShrimpOxygen)
    $call ArgueFactSlot(P_DeadZone.Oxygen)
    $call ArgueFactSlot(WhiteShrimp.Consume.Oxygen)
$endif
{@bayouSci}    The oxygen?
$branch .argue.oxygen.showShrimp

:: argue.oxygen.showShrimp
{@bayouSci}    What does oxygen have to do with shrimp?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.oxygen.completeShrimp
    $answer incorrect, .argue.oxygen.unrelatedShrimp
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.oxygen.unrelatedShrimp
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.oxygen.showShrimp

:: argue.oxygen.completeShrimp
$call ArgueCancelClaim()
$call ArgueComplete()
{@bayouSci}    The shrimp are suffocating?!
$branch .argue.oxygen.loadBacteria


:: argue.oxygen.loadBacteria
$call ArgueLoad(tastropheArgueBacteriaOxygen)
$if ArgueSetClaim(ClaimBacteriaOxygen, jobs.bayou-shrimp-tastrophe.argue.claimLabelBacteriaOxygen)
    $call ArgueFactSlot(DecomposingBacteria.Consume.Oxygen)
    $call ArgueFactSlot(P_DeadZone.Population.DecomposingBacteria)
$endif
$branch .argue.oxygen.showBacteria

:: argue.oxygen.showBacteria
{@bayouSci}    Where did all the oxygen go?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.oxygen.completeBacteria
    $answer incorrect, .argue.oxygen.unrelatedBacteria
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.oxygen.unrelatedBacteria
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.oxygen.showBacteria

:: argue.oxygen.completeBacteria
$call ArgueCancelClaim()
$call ArgueComplete()
{@bayouSci}     The decomposers... Hmmm... I guess all that {nameof Detritus} is causing them to reproduce.
                Remind me.
$branch .argue.oxygen.loadCyanoDetritus

:: argue.oxygen.loadCyanoDetritus
$call ArgueLoad(tastropheArgueCyanoDetritus)
$if ArgueSetClaim(ClaimCyanoDetritus, jobs.bayou-shrimp-tastrophe.argue.claimLabelCyanoDetritus)
    $call ArgueFactSlot(P_DeadZone.Population.Cyanobacteria)
$endif
$branch .argue.oxygen.showCyanoDetritus

:: argue.oxygen.showCyanoDetritus
{@bayouSci}     Where is all the {nameof Detritus} coming from?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.oxygen.completeCyanoDetritus
    $answer incorrect, .argue.oxygen.unrelatedCyanoDetritus
$choice .argue.giveUp; Let me get back to you.
$choose branch


:: argue.oxygen.unrelatedCyanoDetritus
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.oxygen.showCyanoDetritus

:: argue.oxygen.completeCyanoDetritus
$call ArgueCancelClaim()
$call ArgueComplete()
$branch .argue.oxygen.loadCyanoDyingCause


:: argue.oxygen.loadCyanoDyingCause
$call ArgueLoad(tastropheArgueCyanoDyingCause)
$if ArgueSetClaim(ClaimCyanoDyingCause, jobs.bayou-shrimp-tastrophe.argue.claimLabelCyanoDyingCause)
    $call ArgueFactSlot(Cyanobacteria.Consume.Light)
    $call ArgueFactSlot(P_DeadZone.Light)
$endif
$branch .argue.oxygen.showCyanoDyingCause

:: argue.oxygen.showCyanoDyingCause
{@bayouSci}     Why are they dying off?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.oxygen.completeCyanoDyingCause
    $answer incorrect, .argue.oxygen.unrelatedCyanoDyingCause
$choice .argue.giveUp; Let me get back to you.
$choose branch


:: argue.oxygen.unrelatedCyanoDyingCause
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.oxygen.showCyanoDyingCause

:: argue.oxygen.completeCyanoDyingCause
$call ArgueCancelClaim()
$call ArgueComplete()
{@bayouSci}     Wow. That's a lot!
$branch .argue.shared.loadModel
                

// ---------- Light Route

:: argue.light.begin
$if ArgueIsComplete(tastropheArgueCyanoLight), ArgueIsComplete(tastropheArgueLightDecompPopulation), ArgueIsComplete(tastropheArgueLightDecompOxygen)
    // jump to model
    {@bayouSci}    We've established the {nameof Cyanobacteria} light, how {nameof DecomposingBacteria} may be involved, and that {nameof Cyanobacteria} is dying off.
    $branch .argue.shared.loadModel
$elseif ArgueIsComplete(tastropheArgueCyanoLight), ArgueIsComplete(tastropheArgueLightDecompPopulation)
    // jump to why dying off
    {@bayouSci}    We've established the {nameof Cyanobacteria} light and how {nameof DecomposingBacteria} may be involved.
    $branch .argue.light.loadDecompOxygen
$elseif ArgueIsComplete(tastropheArgueCyanoLight)
    // jump to shrimp half
    {@bayouSci}    We've established the {nameof Cyanobacteria} light bit.
    $branch .argue.light.loadDecompPopulation
$else
    // load cyanobacteria half
    $branch .argue.light.loadCyano
$endif

:: argue.light.loadCyano
$call ArgueLoad(tastropheArgueCyanoLight)
$if ArgueSetClaim(ClaimCyanoLight, jobs.bayou-shrimp-tastrophe.argue.claimLabelCyanoLight)
    $call ArgueFactSlot(Cyanobacteria.Consume.Light)
    $call ArgueFactSlot(P_DeadZone.Population.Cyanobacteria)
$endif
{@bayouSci}    Shrimp don't interact with light... 
$branch .argue.light.showCyano

:: argue.light.showCyano
{@bayouSci}    What interacts with light that you think is at the bottom of this?    
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.light.completeCyano
    $answer incorrect, .argue.light.unrelatedCyano
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.light.unrelatedCyano
$if ArgueIsFactSubmitted(Cyanobacteria.Consume.Light.Stressed)
    $branch .argue.light.completeCyano
$else
    $call ArgueRejectIncorrect()
    {@bayouSci}     Not quite what I'm looking for, O.
    $branch .argue.light.showCyano
$endif


:: argue.light.completeCyano
$call ArgueCancelClaim()
$call ArgueComplete()
{@bayouSci}    Hmm, there is quite a bit of {nameof Cyanobacteria}. I'm sure the ones lower down are being starved of light, dying, and turning into {nameof Detritus}.
$branch .argue.light.loadDecompPopulation

:: argue.light.loadDecompPopulation
$call ArgueLoad(tastropheArgueLightDecompPopulation)
$if ArgueSetClaim(ClaimLightDecompPopulation, jobs.bayou-shrimp-tastrophe.argue.claimLabelLightDecompPopulation)
    $call ArgueFactSlot(P_DeadZone.Population.DecomposingBacteria)
$endif
$branch .argue.light.showDecompPopulation

:: argue.light.showDecompPopulation
{@bayouSci}     Is all the extra {nameof Detritus} having an effect on any other population that might effect the shrimp?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.light.completeDecompPopulation
    $answer incorrect, .argue.light.unrelatedDecompPopulation
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.light.unrelatedDecompPopulation
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.light.showDecompPopulation

:: argue.light.completeDecompPopulation
$call ArgueCancelClaim()
$call ArgueComplete()
$branch .argue.light.loadDecompOxygen


:: argue.light.loadDecompOxygen
$call ArgueLoad(tastropheArgueLightDecompOxygen)
$if ArgueSetClaim(ClaimLightDecompPopulation, jobs.bayou-shrimp-tastrophe.argue.claimLabelLightDecompOxygen)
    $call ArgueFactSlot(DecomposingBacteria.Consume.Oxygen)
$endif
$branch .argue.light.showDecompOxygen

:: argue.light.showDecompOxygen
{@bayouSci}    And how precisely do the {nameof DecomposingBacteria} affect the {nameof WhiteShrimp}?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.light.completeDecompOxygen
    $answer incorrect, .argue.light.unrelatedDecompOxygen
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.light.unrelatedDecompOxygen
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.light.showDecompOxygen

:: argue.light.completeDecompOxygen
$call ArgueCancelClaim()
$call ArgueComplete()
{@bayouSci}    The decomposers... Hmmm... There is a lot of {nameof Detritus} for them to get rid of.
                They could overpower the system... Sometimes models speak louder than words.
$branch .argue.shared.loadModel


// Shared

:: argue.shared.loadModel
$call ArgueLoad(tastropheArgueModel)
$if ArgueSetClaim(ClaimModel, jobs.bayou-shrimp-tastrophe.argue.claimLabelModel)
    $call ArgueFactSlot(P_DeadZone.Model.Shrimptastrophe.Sync)
$endif
$branch .argue.shared.showModel

:: argue.shared.showModel
{@bayouSci}    Can I see the model that brings this all together?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.shared.completeModel
    $answer incorrect, .argue.shared.unrelatedModel
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.shared.unrelatedModel
$call ArgueRejectIncorrect()
{@bayouSci}     Not quite what I'm looking for, O. 
$branch .argue.shared.showModel

:: argue.giveUp
{@bayouSci}    Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// End

:: argue.shared.completeModel
$call ArgueComplete()
{@bayouSci}    Yes, I see now. The {nameof Cyanobacteria} shade each other out and the reduction in light causes them stress and then they die.
                When they die, they turn into {nameof Detritus}.
                That detritus is food for the decomposers which steal oxygen from the shrimp. If only we could control the {nameof Cyanobacteria}...
                Your work here has been nothing short of astounding, O!
                Keep up the good work.
$call CompleteJob()

